"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import fog_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SensorServiceStub:
    """SensorService runs on the edge device and
    streams sensor data to the EdgeService.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StreamData: grpc.UnaryStreamMultiCallable[
        fog_pb2.StreamDataRequest,
        fog_pb2.StreamDataResponse,
    ]
    """StreamData will be called by the EdgeService
    to initiate a stream of sensor data.
    """

class SensorServiceAsyncStub:
    """SensorService runs on the edge device and
    streams sensor data to the EdgeService.
    """

    StreamData: grpc.aio.UnaryStreamMultiCallable[
        fog_pb2.StreamDataRequest,
        fog_pb2.StreamDataResponse,
    ]
    """StreamData will be called by the EdgeService
    to initiate a stream of sensor data.
    """

class SensorServiceServicer(metaclass=abc.ABCMeta):
    """SensorService runs on the edge device and
    streams sensor data to the EdgeService.
    """

    @abc.abstractmethod
    def StreamData(
        self,
        request: fog_pb2.StreamDataRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[fog_pb2.StreamDataResponse], collections.abc.AsyncIterator[fog_pb2.StreamDataResponse]]:
        """StreamData will be called by the EdgeService
        to initiate a stream of sensor data.
        """

def add_SensorServiceServicer_to_server(servicer: SensorServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class EdgeServiceStub:
    """EdgeService runs on the edge device and
    receives sensor data from the SensorService.
    Removed the ProcessDataStream RPC from EdgeService
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ...

class EdgeServiceAsyncStub:
    """EdgeService runs on the edge device and
    receives sensor data from the SensorService.
    Removed the ProcessDataStream RPC from EdgeService
    """

    ...

class EdgeServiceServicer(metaclass=abc.ABCMeta):
    """EdgeService runs on the edge device and
    receives sensor data from the SensorService.
    Removed the ProcessDataStream RPC from EdgeService
    """

    ...

def add_EdgeServiceServicer_to_server(servicer: EdgeServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class CloudServiceStub:
    """CloudService runs on the cloud and processes
    aggregated sensor data.
    """

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ProcessDataStream: grpc.StreamStreamMultiCallable[
        fog_pb2.ProcessDataRequest,
        fog_pb2.UpdatePositionResponse,
    ]
    """Bidirectional streaming endpoint for processing data
    and sending back position updates to the EdgeService.
    """

class CloudServiceAsyncStub:
    """CloudService runs on the cloud and processes
    aggregated sensor data.
    """

    ProcessDataStream: grpc.aio.StreamStreamMultiCallable[
        fog_pb2.ProcessDataRequest,
        fog_pb2.UpdatePositionResponse,
    ]
    """Bidirectional streaming endpoint for processing data
    and sending back position updates to the EdgeService.
    """

class CloudServiceServicer(metaclass=abc.ABCMeta):
    """CloudService runs on the cloud and processes
    aggregated sensor data.
    """

    @abc.abstractmethod
    def ProcessDataStream(
        self,
        request_iterator: _MaybeAsyncIterator[fog_pb2.ProcessDataRequest],
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[fog_pb2.UpdatePositionResponse], collections.abc.AsyncIterator[fog_pb2.UpdatePositionResponse]]:
        """Bidirectional streaming endpoint for processing data
        and sending back position updates to the EdgeService.
        """

def add_CloudServiceServicer_to_server(servicer: CloudServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
