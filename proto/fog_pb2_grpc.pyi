"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import fog_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class SensorServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    StreamData: grpc.UnaryStreamMultiCallable[
        fog_pb2.SensorRequest,
        fog_pb2.SensorResponse,
    ]

class SensorServiceAsyncStub:
    StreamData: grpc.aio.UnaryStreamMultiCallable[
        fog_pb2.SensorRequest,
        fog_pb2.SensorResponse,
    ]

class SensorServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def StreamData(
        self,
        request: fog_pb2.SensorRequest,
        context: _ServicerContext,
    ) -> typing.Union[collections.abc.Iterator[fog_pb2.SensorResponse], collections.abc.AsyncIterator[fog_pb2.SensorResponse]]: ...

def add_SensorServiceServicer_to_server(servicer: SensorServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class EdgeServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ...

class EdgeServiceAsyncStub:
    ...

class EdgeServiceServicer(metaclass=abc.ABCMeta):
    ...

def add_EdgeServiceServicer_to_server(servicer: EdgeServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...

class CloudServiceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    ProcessData: grpc.UnaryUnaryMultiCallable[
        fog_pb2.CloudRequest,
        fog_pb2.CloudResponse,
    ]

class CloudServiceAsyncStub:
    ProcessData: grpc.aio.UnaryUnaryMultiCallable[
        fog_pb2.CloudRequest,
        fog_pb2.CloudResponse,
    ]

class CloudServiceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def ProcessData(
        self,
        request: fog_pb2.CloudRequest,
        context: _ServicerContext,
    ) -> typing.Union[fog_pb2.CloudResponse, collections.abc.Awaitable[fog_pb2.CloudResponse]]: ...

def add_CloudServiceServicer_to_server(servicer: CloudServiceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
